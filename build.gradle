buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.net.minecraftforge.gradle:ForgeGradle:2.0.1"
    }
}

ext.moduleDeps = [ "api":       [ ],
                   "core":      [ "api" ],
                   "builders":  [ "api", "core" ],
                   "energy":    [ "api", "core" ],
                   "factory":   [ "api", "core" ],
                   "transport": [ "api", "core" ],
                   "silicon":   [ "api", "core" ],
                   "robotics":  [ "api", "core", "transport", "silicon" ]
]

allprojects {
    apply plugin: "net.minecraftforge.gradle.forge"
    apply plugin: "maven"

    version = "2"
    group= "com.mod-buildcraft"

    minecraft {
        mappings = "stable_16"
        version = "1.8-11.14.3.1518" // McVersion-ForgeVersion this variable is later changed to contain only the MC version, while the apiVersion variable is used for the forge version.  Yeah its stupid, and will be changed eventually.

        runDir = "run" // the directory for ForgeGradle to run Minecraft in

        // replacing stuff in the source
        replace "@VERSION@", project.version
        replace "@MC_VERSION@", version
    }
}

// Only applied for the root buildcraft project
archivesBaseName = "buildcraft-all-ALPHA"

sourceSets {
    main {
        java {
            subprojects.each { subproject -> 
                srcDir subproject.name + "/java"
            }
        }
        resources {
            subprojects.each { subproject -> 
                srcDir subproject.name + "/resources"
            }
        }
    }
}

task ("deobfJar", type: Jar) {
    from sourceSets.main.allSource
    archiveName = "buildcraft-all-ALPHA" + project.version + "-dev.jar"
}

build.dependsOn deobfJar

// Applied for each module
subprojects {
    // Artifacts names follow this pattern: [baseName]-[appendix]-[version]-[classifier].[extension]
    archivesBaseName = "buildcraft-" + project.name + "-ALPHA"

    // Define a standard source set
    sourceSets {
        main {
            java {
                srcDir "java"
            }
            resources {
                srcDir "resources"
            }
        }
    }

    // Define the name of the subproject here, as inside of the classpath
    // project.name referes to "buildcraft"
    def thisName = project.name

    project.parent.eclipse {
        classpath {
            file {
                // After we merge the classpath add the java and resources folders for evrything
                whenMerged { classpath ->
                    // if it already contains this entry then don't add it again
                    boolean contains = false;
                    classpath.entries.each { entry ->
                        if (entry.getPath().contains(thisName + "/java")) {
                            contains = true;
                        }
                    }
                    if (!contains) {
                        def srcJava = new org.gradle.plugins.ide.eclipse.model.SourceFolder(thisName + "/java", "")
                        classpath.entries << srcJava
                    }

                    contains = false;
                    classpath.entries.each { entry ->
                        if (entry.getPath().contains(thisName + "/resources")) {
                            contains = true;
                        }
                    }
                    if (!contains) {
                        def resources = new org.gradle.plugins.ide.eclipse.model.SourceFolder(thisName + "/resources", "")
                        classpath.entries << resources
                    }                
                }
            }
        }
    }

    task ("deobfJar", type: Jar) {
        from sourceSets.main.allSource
        archiveName = "buildcraft-" + project.name + "-ALPHA-ki" + project.version + "-dev.jar"
    }

    task ("copyOut", type: Copy) {
        from "build/libs"
        into "../build/libs"
    }

    copyOut.dependsOn deobfJar, jar, reobfJar

    build.dependsOn copyOut

    dependencies {
        moduleDeps[project.name].each { dependency ->
            // Require the classes directly from the dependency
            compile project(":" + dependency).sourceSets.main.output
        }
    }

    // Don't let someone generate eclipse stuffs
    tasks.remove tasks["eclipse"]

    // Don't let someone generate IDEA stuffs
    tasks.remove tasks["idea"]
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"

dependencies {
    testCompile "junit:junit:4.12"
}
