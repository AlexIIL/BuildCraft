// DON'T TOUCH THE BUILDSCRIPT[] BLOCK
// its special, and it is only there to make ForgeGradle work correctly.

import net.minecraftforge.gradle.user.UserConstants
import net.minecraftforge.gradle.delayed.DelayedFile
import net.minecraftforge.gradle.delayed.DelayedString
import net.minecraftforge.gradle.tasks.user.reobf.ReobfTask

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
    }
}

apply plugin: "forge" // adds the forge dependency
apply plugin: "maven" // for uploading to a maven repo
//apply plugin: "checkstyle"

version = "7.0.5"
group= "com.mod-buildcraft"
archivesBaseName = "buildcraft" // the name that all artifacts will use as a base. artifacts names follow this pattern: [baseName]-[appendix]-[version]-[classifier].[extension]

minecraft {
    mappings = "stable_16"
    version = "1.8-11.14.3.1502" // McVersion-ForgeVersion     this variable is later changed to contain only the MC version, while the apiVersion variable is used for the forge version.  Yeah its stupid, and will be changed eventually.

    runDir = "run" // the directory for ForgeGradle to run Minecraft in

    // replacing stuff in the source
    replace "@VERSION@", project.version
    replace "@MC_VERSION@", version
}

sourceSets {
    core {
        resources {
            def l10n = file("../BuildCraft-Localization")
            if(l10n.exists())
                   srcDir l10n
            exclude "**/.md" // exclude readme from localization repo
        }
    }
}

// --------------------
// extra jar section
// --------------------

// add a source jar
task sourceJar(type: Jar) {
    classifier = "sources"
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    classifier = "developer"

    // This makes the dev output work
    doLast {
        println "hi"
        com.google.common.io.Files.copy(
                new File("./build/libs/buildcraft-" + version + "-developer.jar"), 
                new File("./build/libs/buildcraft-" + version + ".jar"))
    }
}

// --------------------
// module section
// --------------------

ext.modules = [ "api", "core", "builders", "energy", "factory", "transport", "silicon", "robotics" ]
ext.moduleDependencies = [  
                                "api":[],
                                "core":["api"],
                                "builders":["api", "core"],
                                "energy": ["api", "core"],
                                "factory": ["api", "core"],
                                "transport": ["api", "core"],
                                "silicon": ["api", "core"],
                                "robotics": ["api", "core", "silicon", "transport"]
                        ]

println "modules:"
modules.each { module ->
    println "  " + module
    if (sourceSets.findByName(module) == null) {
           sourceSets.create("${module}") {
            java {
                srcDir "src/${module}/java"
            }
            resources {
                srcDir "src/${module}/resources"
            }
        }
    }
    sourceSets[module].compileClasspath += sourceSets["api"].compileClasspath
    moduleDependencies[module].each { dependant ->
        sourceSets[module].compileClasspath += sourceSets[dependant].output
        println "    depends on " + dependant
    }
    task (module + "DeobfJar", type: Jar) {
        from sourceSets[module].output
        appendix = module
        classifier = "developer"
        doLast {
            com.google.common.io.Files.copy(
                    new File("./build/libs/buildcraft-" + module + "-" + version + "-developer.jar"), 
                    new File("./build/libs/buildcraft-" + module + "-" + version + ".jar"))
        }
    }
    task (module + "SourceJar", type: Jar) {
        from sourceSets[module].allSource
        appendix = module
        classifier = "source"
    }
    task (module + "Jar", type: ReobfTask, dependsOn: module + "DeobfJar") {
        reobf tasks[module + "DeobfJar"]

        File reobfInput = new File("./build/libs/buildcraft-" + module + "-" + version + "-developer.jar")
        deobfFile = new DelayedFile(reobfInput)
        
        File reobfOutput = new File("./build/libs/buildcraft-" + module + "-" + version + ".jar")

        recompFile = new DelayedFile(reobfOutput)

        setSrgSrg()
        setMcVersion(new DelayedString(getProject(), minecraft.version))
        setExceptorCfg(new DelayedFile(getProject(), UserConstants.EXC_SRG, getProject().getPlugins().getPlugin("forge")));
        setFieldCsv(new DelayedFile(getProject(), UserConstants.FIELD_CSV, getProject().getPlugins().getPlugin("forge")));
        setMethodCsv(new DelayedFile(getProject(), UserConstants.METHOD_CSV, getProject().getPlugins().getPlugin("forge")));
    }

    tasks.sourceJar.from sourceSets[module].allSource
    tasks.deobfJar.from sourceSets[module].output // TODO: Find out what to use instead of "output" for the full jar
    build.dependsOn tasks[module + "Jar"]
    build.dependsOn tasks[module + "DeobfJar"]
    build.dependsOn tasks[module + "SourceJar"]
}

task ("reobfJar", type: ReobfTask, dependsOn: deobfJar) {
        reobf tasks["deobfJar"]   

        File reobfInput = new File("./build/libs/buildcraft-" + version + "-developer.jar")
        deobfFile = new DelayedFile(reobfInput)
        
        File reobfOutput = new File("./build/libs/buildcraft-" + version + ".jar")

        recompFile = new DelayedFile(reobfOutput)

        setSrgSrg()
        setMcVersion(new DelayedString(getProject(), minecraft.version))
        setExceptorCfg(new DelayedFile(getProject(), UserConstants.EXC_SRG, getProject().getPlugins().getPlugin("forge")));
        setFieldCsv(new DelayedFile(getProject(), UserConstants.FIELD_CSV, getProject().getPlugins().getPlugin("forge")));
        setMethodCsv(new DelayedFile(getProject(), UserConstants.METHOD_CSV, getProject().getPlugins().getPlugin("forge")));
}

build.dependsOn tasks["reobfJar"]

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        // ${version}   and    ${mcversion}    are the exact strings being replaced
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//checkstyle {
//    configFile = file('guidelines/buildcraft.checkstyle')
//}

//checkstyleApi.exclude "cofh/**"

// make sure all of these happen when we run build
build.dependsOn sourceJar, deobfJar

// --------------------
// maven section
// -------------------

// create the deployerJars dependency configuration
configurations {
    deployerJars
}

dependencies {
    // dependency in deployerJars, for maven deployment. see definition in mavenDeployer{} below
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
}

// specify artifacts to be uploaded
artifacts {
    // the default jar is already here by default
    archives sourceJar
    // archives javadocJar
    archives deobfJar
    // archives apiJar
}

uploadArchives {
    // make sure this happens after reobfuscation
    dependsOn 'reobf'

    repositories {
        if (project.hasProperty("filesmaven")) { // if this is the Forge server, and this stuff is defined...
            logger.info('Publishing to files server')

            mavenDeployer {
                // specify the jars that maven needs to deploy here
                configuration = configurations.deployerJars

                // authentication, again, specially set in the forge server environment
                repository(url: project.filesmaven.url) {
                    authentication(userName: project.filesmaven.username, privateKey: project.filesmaven.key)
                }

                // here you specify all your metadata
                // this is the definition of the maven pom.xml. This is simply a DSL to define the XML. Not actual fields or things to set.
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'A Minecraft mod adding all sorts of machinery'
                        url 'http://www.mod-buildcraft.com/'

                        scm {
                            url 'https://github.com/BuildCraft/BuildCraft'
                            connection 'scm:git:git://github.com/BuildCraft/BuildCraft.git'
                            developerConnection 'scm:git:git@github.com:BuildCraft/BuildCraft.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/BuildCraft/BuildCraft/issues'
                        }

                        licenses {
                            license {
                                name 'Minecraft Mod Public License'
                                url 'http://www.mod-buildcraft.com/MMPL-1.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'SpaceToad'
                                name 'SpaceToad'
                                roles { role 'developer' }
                            }
                            developer {
                                id 'CovertJaguar'
                                name 'CovertJaguar'
                                roles { role 'developer' }
                            }
                            developer {
                                id 'SirSngir'
                                name 'SirSengir'
                                roles { role 'developer' }
                            }   
                            developer {
                                id 'Krapht'
                                name 'Krapht'
                                roles { role 'developer' }
                            }   

                        }
                    }
                }
            }
        }
        else
        {
            // otherwise publishing to the local repo in ~/.m2 is fine...
            add project.repositories.mavenLocal()
        }
    }
}
